# Cursor Rules - ui-ct-one

## Vis√£o Geral do Projeto


## Documenta√ß√£o de Refer√™ncia


## Padr√µes de Desenvolvimento

### üèóÔ∏è Arquitetura
- **Modular**: Organiza√ß√£o por m√≥dulos funcionais
- **SOLID**: Princ√≠pios de design orientado a objetos
- **Dependency Injection**: Via NestJS container
- **Repository Pattern**: Acesso a dados via Sequelize


### üé® Padr√µes de Estilo
- **Arquivos**: kebab-case (`report-service.ts`)
- **Classes**: PascalCase (`ReportService`)
- **Interfaces**: PascalCase com prefixo I (`IReportData`)
- **Constantes**: UPPER_SNAKE_CASE (`MAX_FILE_SIZE`)
- **Vari√°veis/Fun√ß√µes**: camelCase (`generateReport`)


## Regras de Desenvolvimento

### ‚úÖ Obrigat√≥rio
1. **Sempre consulte** `docs/REUSABLE_COMPONENTS.md` antes de criar novos utilit√°rios
2. **Use CommonListing** para listagens paginadas
4. **Valide inputs** com Class Validator + Zod
6. **Mantenha arquivos < 300 linhas** - refatore quando necess√°rio
7. **Use TypeScript** com type safety adequado

### ‚ùå Proibido
1. **N√£o duplique c√≥digo** - verifique utils existentes primeiro
2. **N√£o use `any`** sem justificativa
3. **N√£o ignore erros** - sempre trate adequadamente
4. **N√£o hardcode** valores - use configura√ß√µes
5. **N√£o sobrescreva** `.env` sem confirma√ß√£o
6. **Sempre escreva coment√°rios** no c√≥digo (regra do projeto)


### üîß Scripts Importantes
```bash
pnpm run start:dev      # Desenvolvimento
pnpm run build:prod     # Build produ√ß√£o
pnpm run lint           # ESLint
pnpm run test           # Testes
pnpm run start:pm2      # PM2
```

## Performance

### ‚ö° Otimiza√ß√µes
- **Lazy Loading** para m√≥dulos pesados
- **Caching** em m√∫ltiplas camadas
- **Connection Pooling** para banco
- **Streams** para arquivos grandes

### üìä Monitoramento
- **Logs estruturados** em JSON
- **M√©tricas** de performance
- **Health checks** autom√°ticos

## Seguran√ßa

### üîí Valida√ß√µes
- **Input validation** em m√∫ltiplas camadas
- **SQL injection** preven√ß√£o via ORM
- **Rate limiting** via interceptors
- **CORS** configurado adequadamente


### üìã Checklist
- [ ] Testes passando
- [ ] Lint sem erros
- [ ] Build sem warnings
- [ ] Vari√°veis de ambiente configuradas
- [ ] Logs configurados
- [ ] Health checks funcionando

## Refer√™ncias R√°pidas



### üìù Conven√ß√µes
- **M√©todos**: `get*`, `create*`, `update*`, `delete*`, `generate*`
- **Arquivos**: `*.controller.ts`, `*.service.ts`, `*.module.ts`, `*.dto.ts`
- **Classes**: `*Controller`, `*Service`, `*Module`, `*Dto`

---

**Lembre-se**: Sempre consulte a documenta√ß√£o em `docs/` antes de implementar novas funcionalidades ou modificar componentes existentes. 