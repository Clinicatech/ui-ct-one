# Cursor Rules - UI CT-One

## üìã √çndice R√°pido

- [Contexto do Projeto](#contexto-do-projeto)
- [Regras Gerais](#regras-gerais)
- [Stack Tecnol√≥gica](#stack-tecnol√≥gica)
- [Estrutura de Componentes](#estrutura-de-componentes)
- [Padr√µes de C√≥digo](#padr√µes-de-c√≥digo)
- [Sistema de Design](#sistema-de-design)
- [Roteamento e Navega√ß√£o](#roteamento-e-navega√ß√£o)
- [Estado e Dados](#estado-e-dados)
- [Testes](#testes)
- [Performance](#performance)
- [Deploy e Build](#deploy-e-build)

## üéØ Contexto do Projeto

**UI CT-One** - Interface de usu√°rio para o sistema de gest√£o ClinicaTech com foco em:

- Gest√£o de s√≥cios, parceiros e clientes
- Contratos e movimenta√ß√µes financeiras
- Interface moderna e responsiva
- Experi√™ncia de usu√°rio otimizada
- Integra√ß√£o com API backend

**Vers√£o Atual:** 0.0.0  
**Ambiente:** Desenvolvimento/Produ√ß√£o  
**Porta:** 3000 (dev) / 3001 (prod)  
**API Backend:** http://localhost:3391  
**Autor:** A.Koplin  
**Licen√ßa:** @Clinicatech

## üöÄ Regras Gerais

### Comunica√ß√£o e Linguagem

- **Sempre responda em portugu√™s brasileiro**
- Use linguagem t√©cnica clara e objetiva
- Explique conceitos complexos com exemplos pr√°ticos

### Tecnologias e Ferramentas

- **Use TypeScript** para todos os novos arquivos
- **Use pnpm** ao inv√©s de npm para gerenciamento de pacotes
- Siga as conven√ß√µes de nomenclatura do projeto
- Mantenha o c√≥digo limpo e bem documentado
- Teste sempre que poss√≠vel com build e lint, apenas

### Qualidade de C√≥digo

- Evite duplica√ß√£o de c√≥digo sempre que poss√≠vel
- Verifique outros componentes que j√° possam ter funcionalidade semelhante
- Escreva c√≥digo que leve em considera√ß√£o os diferentes ambientes: dev, test e prod
- Seja cauteloso ao fazer apenas as mudan√ßas que s√£o solicitadas
- Mantenha o c√≥digo bem estruturado e organizado
- Evite arquivos com mais de 200-300 linhas de c√≥digo (refatore nesse ponto)
- **SEMPRE teste build ap√≥s implementar mudan√ßas**: `pnpm run build`
- **Teste lint se configurado**: `pnpm run lint` (quando dispon√≠vel)

### Coment√°rios e Documenta√ß√£o

- **SEMPRE escreva coment√°rios no c√≥digo** (a menos que explicitamente solicitado)
- Use JSDoc para documenta√ß√£o de fun√ß√µes complexas
- Mantenha documenta√ß√£o de componentes sempre atualizada

## üõ† Stack Tecnol√≥gica

### Frontend Principal

- **Framework:** React v19.1.1
- **Linguagem:** TypeScript v5.9.2
- **Bundler:** Vite v7.1.2
- **Styling:** Tailwind CSS v3.4.17
- **Roteamento:** React Router v7.8.0
- **√çcones:** Lucide React v0.539.0

### Componentes e UI

- **Componentes:** Radix UI (acessibilidade)
- **Styling:** Tailwind CSS + CSS Variables
- **Anima√ß√µes:** CSS Transitions + Framer Motion (se necess√°rio)
- **Formul√°rios:** React Hook Form + Zod
- **Notifica√ß√µes:** Sonner v2.0.7

### Utilit√°rios e Bibliotecas

- **Styling:** clsx, tailwind-merge, class-variance-authority
- **Data:** Recharts v3.1.2 (gr√°ficos)
- **Carousel:** Embla Carousel v8.6.0
- **Panels:** React Resizable Panels v3.0.4
- **Themes:** Next Themes v0.4.6
- **Command:** CMDK v1.1.1

### Desenvolvimento

- **Package Manager:** pnpm
- **Linting:** ESLint v9.33.0 + TypeScript ESLint
- **Build:** Vite + TypeScript
- **Testing:** Jest + React Testing Library (quando implementado)

## üèó Estrutura de Componentes

### Arquitetura de Pastas

```
src/
‚îú‚îÄ‚îÄ components/           # Componentes reutiliz√°veis
‚îÇ   ‚îú‚îÄ‚îÄ ui/              # Componentes base (Radix UI)
‚îÇ   ‚îú‚îÄ‚îÄ forms/           # Formul√°rios espec√≠ficos
‚îÇ   ‚îî‚îÄ‚îÄ layout/          # Componentes de layout
‚îú‚îÄ‚îÄ pages/               # P√°ginas da aplica√ß√£o
‚îú‚îÄ‚îÄ hooks/               # Custom hooks
‚îú‚îÄ‚îÄ services/            # Servi√ßos de API
‚îú‚îÄ‚îÄ contexts/            # Context providers
‚îú‚îÄ‚îÄ types/               # Defini√ß√µes de tipos
‚îú‚îÄ‚îÄ utils/               # Fun√ß√µes utilit√°rias
‚îú‚îÄ‚îÄ constants/           # Constantes da aplica√ß√£o
‚îú‚îÄ‚îÄ assets/              # Recursos est√°ticos
‚îî‚îÄ‚îÄ styles/              # Estilos globais
```

### Componentes Existentes

- **Forms:** ClienteForm, SocioForm, ParceiroForm, ContratoForm, EntityForm, UsuarioForm
- **Dialogs:** BancoSearchDialog, PersonSearchDialog, PessoaSearchDialog
- **Pages:** clientes, socios, parceiros, contratos, entities, usuarios
- **UI:** Componentes base do Radix UI

### Padr√µes Implementados

- **Component Composition:** Composi√ß√£o de componentes
- **Custom Hooks:** L√≥gica reutiliz√°vel
- **Context Pattern:** Gerenciamento de estado global
- **Service Layer:** Abstra√ß√£o de chamadas de API

## üìù Padr√µes de C√≥digo

### Conven√ß√µes de Nomenclatura

#### Arquivos e Diret√≥rios

- **kebab-case:** `cliente-form.tsx`, `banco-search-dialog/`
- **PascalCase:** Componentes, Interfaces, Types
- **camelCase:** Vari√°veis, fun√ß√µes, hooks
- **UPPER_SNAKE_CASE:** Constantes, enums

#### Componentes React

- **Componentes:** PascalCase (`ClienteForm`, `BancoSearchDialog`)
- **Hooks:** camelCase com prefixo `use` (`useClienteData`, `useFormValidation`)
- **Props:** camelCase (`onSubmit`, `isLoading`, `clienteData`)
- **Event Handlers:** camelCase com prefixo `handle` (`handleSubmit`, `handleChange`)

### Imports (Ordem Obrigat√≥ria)

1. React e React hooks (`react`, `react-dom`)
2. Third-party libraries (`@radix-ui/react-*`, `lucide-react`)
3. Internal components (`../components/ui/button`)
4. Internal hooks (`../hooks/useClienteData`)
5. Internal services (`../services/api`)
6. Internal types (`../types/cliente`)
7. Internal utils (`../utils/format`)
8. Relative imports (`./styles.module.css`)

### Componentes React

```typescript
import React from "react";
import { Button } from "@/components/ui/button";
import { useClienteData } from "@/hooks/useClienteData";
import type { Cliente } from "@/types/cliente";

interface ClienteFormProps {
  cliente?: Cliente;
  onSubmit: (data: Cliente) => void;
  isLoading?: boolean;
}

export const ClienteForm: React.FC<ClienteFormProps> = ({
  cliente,
  onSubmit,
  isLoading = false,
}) => {
  const { data, loading } = useClienteData(cliente?.id);

  const handleSubmit = (formData: Cliente) => {
    onSubmit(formData);
  };

  if (loading) {
    return <div>Carregando...</div>;
  }

  return <form onSubmit={handleSubmit}>{/* Form content */}</form>;
};
```

### Custom Hooks

```typescript
import { useState, useEffect } from "react";
import { apiService } from "@/services/api";
import type { Cliente } from "@/types/cliente";

export const useClienteData = (clienteId?: number) => {
  const [data, setData] = useState<Cliente | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!clienteId) return;

    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await apiService.getCliente(clienteId);
        setData(response.data);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Erro desconhecido");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [clienteId]);

  return { data, loading, error };
};
```

## üé® Sistema de Design

### Design System

- **Base:** Radix UI para acessibilidade
- **Styling:** Tailwind CSS com CSS Variables
- **Themes:** Suporte a tema claro/escuro
- **Responsividade:** Mobile-first approach

### Cores e Temas

```css
/* CSS Variables para temas */
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  --secondary-foreground: 222.2 47.4% 11.2%;
  /* ... outras vari√°veis */
}
```

### Tipografia

- **Fonte Principal:** Montserrat (Regular, Light, Medium, Bold, SemiBold, ExtraBold)
- **Fonte Secund√°ria:** Nexa (Light, Bold)
- **Classes Tailwind:** `font-montserrat`, `font-nexa-bold`, etc.

### Componentes Base

- **Button:** Varia√ß√µes de tamanho e estilo
- **Input:** Campos de entrada padronizados
- **Card:** Containers de conte√∫do
- **Dialog:** Modais e popups
- **Form:** Formul√°rios com valida√ß√£o

## üß≠ Roteamento e Navega√ß√£o

### React Router v7

```typescript
import { createBrowserRouter, RouterProvider } from "react-router-dom";

const router = createBrowserRouter([
  {
    path: "/",
    element: <Main />,
    children: [
      {
        path: "clientes",
        element: <ClientesPage />,
      },
      {
        path: "socios",
        element: <SociosPage />,
      },
      // ... outras rotas
    ],
  },
]);
```

### Navega√ß√£o

- **Sidebar:** Navega√ß√£o principal
- **Breadcrumbs:** Navega√ß√£o contextual
- **Tabs:** Navega√ß√£o por abas
- **Back Navigation:** Voltar para p√°gina anterior

## üìä Estado e Dados

### Gerenciamento de Estado

- **Local State:** useState, useReducer
- **Global State:** Context API
- **Server State:** Custom hooks com fetch
- **Form State:** React Hook Form

### Context Providers

```typescript
interface AppContextType {
  user: User | null;
  theme: "light" | "dark";
  setTheme: (theme: "light" | "dark") => void;
}

export const AppContext = createContext<AppContextType | undefined>(undefined);

export const AppProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<User | null>(null);
  const [theme, setTheme] = useState<"light" | "dark">("light");

  return (
    <AppContext.Provider value={{ user, theme, setTheme }}>
      {children}
    </AppContext.Provider>
  );
};
```

### Servi√ßos de API

```typescript
class ApiService {
  private baseURL = "/api";

  async getClientes(): Promise<Cliente[]> {
    const response = await fetch(`${this.baseURL}/clientes`);
    return response.json();
  }

  async createCliente(data: CreateClienteDto): Promise<Cliente> {
    const response = await fetch(`${this.baseURL}/clientes`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    });
    return response.json();
  }
}

export const apiService = new ApiService();
```

## üß™ Testes

### Estrutura de Testes

```typescript
import { render, screen, fireEvent } from "@testing-library/react";
import { ClienteForm } from "./ClienteForm";

describe("ClienteForm", () => {
  it("should render form fields", () => {
    render(<ClienteForm onSubmit={jest.fn()} />);

    expect(screen.getByLabelText(/nome/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
  });

  it("should call onSubmit when form is submitted", () => {
    const mockSubmit = jest.fn();
    render(<ClienteForm onSubmit={mockSubmit} />);

    fireEvent.click(screen.getByRole("button", { name: /salvar/i }));

    expect(mockSubmit).toHaveBeenCalled();
  });
});
```

### Testes de Integra√ß√£o

- Teste de fluxos completos
- Teste de navega√ß√£o entre p√°ginas
- Teste de formul√°rios com valida√ß√£o

## ‚ö° Performance

### Otimiza√ß√µes

- **Code Splitting:** Lazy loading de rotas
- **Memoization:** React.memo, useMemo, useCallback
- **Bundle Analysis:** An√°lise de tamanho do bundle
- **Image Optimization:** Lazy loading de imagens

### Lazy Loading

```typescript
import { lazy, Suspense } from "react";

const ClientesPage = lazy(() => import("./pages/clientes"));
const SociosPage = lazy(() => import("./pages/socios"));

const App = () => (
  <Suspense fallback={<div>Carregando...</div>}>
    <Router>
      <Routes>
        <Route path="/clientes" element={<ClientesPage />} />
        <Route path="/socios" element={<SociosPage />} />
      </Routes>
    </Router>
  </Suspense>
);
```

### Memoization

```typescript
import { memo, useMemo, useCallback } from "react";

export const ClienteList = memo(({ clientes, onEdit, onDelete }) => {
  const sortedClientes = useMemo(() => {
    return clientes.sort((a, b) => a.nome.localeCompare(b.nome));
  }, [clientes]);

  const handleEdit = useCallback(
    (id: number) => {
      onEdit(id);
    },
    [onEdit]
  );

  return (
    <div>
      {sortedClientes.map((cliente) => (
        <ClienteCard
          key={cliente.id}
          cliente={cliente}
          onEdit={handleEdit}
          onDelete={onDelete}
        />
      ))}
    </div>
  );
});
```

## üöÄ Deploy e Build

### Scripts Dispon√≠veis

```bash
# Desenvolvimento
pnpm run start:dev      # Servidor de desenvolvimento (porta 3000)
pnpm run preview        # Preview da build de produ√ß√£o

# Build
pnpm run build          # Build de produ√ß√£o
pnpm run lint           # ESLint

# An√°lise
pnpm run analyze        # An√°lise do bundle (quando implementado)
```

### Configura√ß√£o Vite

```typescript
// vite.config.ts
export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: true,
    proxy: {
      "/api": {
        target: "http://localhost:3391",
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ""),
      },
    },
  },
  build: {
    outDir: "dist",
    sourcemap: true,
  },
});
```

### Vari√°veis de Ambiente

```bash
# .env.development
VITE_API_URL=http://localhost:3391
VITE_APP_NAME=CT-One Dev

# .env.production
VITE_API_URL=https://api.ctone.com
VITE_APP_NAME=CT-One
```

## üîí Seguran√ßa

### Valida√ß√£o de Dados

- **Client-side:** Valida√ß√£o com Zod
- **Sanitiza√ß√£o:** Limpeza de inputs
- **XSS Prevention:** Escape de conte√∫do

### Autentica√ß√£o

- **JWT Tokens:** Armazenamento seguro
- **Route Protection:** Guards para rotas protegidas
- **Session Management:** Controle de sess√£o

## üì± Responsividade

### Breakpoints Tailwind

```css
/* Breakpoints padr√£o */
sm: 640px   /* Mobile landscape */
md: 768px   /* Tablet */
lg: 1024px  /* Desktop */
xl: 1280px  /* Large desktop */
2xl: 1536px /* Extra large */
```

### Mobile-First

- Design mobile-first
- Touch-friendly interfaces
- Gestos de navega√ß√£o
- Performance otimizada para mobile

## üéØ Acessibilidade

### Radix UI

- Componentes acess√≠veis por padr√£o
- Suporte a screen readers
- Navega√ß√£o por teclado
- ARIA attributes

### Boas Pr√°ticas

- Labels descritivos
- Contraste adequado
- Foco vis√≠vel
- Texto alternativo para imagens

## üìã Checklist de Qualidade

### Antes de Commitar

- [ ] C√≥digo segue conven√ß√µes de nomenclatura
- [ ] Imports organizados corretamente
- [ ] Componentes s√£o acess√≠veis
- [ ] Responsividade testada
- [ ] Performance considerada
- [ ] **Build passando**: `pnpm run build`
- [ ] **Lint sem erros**: `pnpm run lint` (se configurado)
- [ ] TypeScript sem erros

### Revis√£o de C√≥digo

- [ ] Componentes s√£o reutiliz√°veis
- [ ] L√≥gica est√° bem separada
- [ ] Hooks s√£o customizados quando necess√°rio
- [ ] Estado √© gerenciado adequadamente
- [ ] Performance √© otimizada
- [ ] Acessibilidade implementada
- [ ] Testes adequados

## üîÑ Considera√ß√µes Espec√≠ficas

### Formul√°rios

- **Valida√ß√£o:** Zod + React Hook Form
- **Feedback:** Mensagens de erro claras
- **UX:** Loading states e feedback visual
- **Acessibilidade:** Labels e ARIA attributes

### Listagens

- **Pagina√ß√£o:** Implementar quando necess√°rio
- **Filtros:** Filtros din√¢micos
- **Ordena√ß√£o:** Ordena√ß√£o por colunas
- **Busca:** Busca em tempo real

### Modais e Dialogs

- **Radix UI:** Usar componentes base
- **Foco:** Gerenciamento de foco
- **Escape:** Fechar com ESC
- **Backdrop:** Clique fora para fechar

## üöÄ Pr√≥ximos Passos

### Melhorias Sugeridas

1. **Testing:** Implementar Jest + React Testing Library
2. **Storybook:** Documenta√ß√£o de componentes
3. **PWA:** Transformar em Progressive Web App
4. **Analytics:** Implementar tracking de eventos
5. **Error Boundary:** Tratamento de erros global
6. **Loading States:** Skeletons e loading components
7. **Offline Support:** Funcionalidade offline

### Arquitetura Evolutiva

- **State Management:** Redux Toolkit (se necess√°rio)
- **Micro Frontends:** Prepara√ß√£o para arquitetura modular
- **SSR:** Server-Side Rendering com Next.js (futuro)
- **Component Library:** Biblioteca de componentes pr√≥pria

## üìñ Recursos Adicionais

### Documenta√ß√£o

- [React Documentation](https://react.dev/)
- [Vite Documentation](https://vitejs.dev/)
- [Tailwind CSS Documentation](https://tailwindcss.com/)
- [Radix UI Documentation](https://www.radix-ui.com/)

### Ferramentas

- **React DevTools:** Debug de componentes
- **Vite DevTools:** An√°lise de build
- **Tailwind CSS IntelliSense:** Autocomplete
- **ESLint:** Linting e formata√ß√£o

---

## üéØ Modo Planejador

Quando solicitado a entrar no "Modo Planejador", siga esta sequ√™ncia:

1. **An√°lise Profunda:** Reflita sobre as mudan√ßas solicitadas
2. **Mapeamento:** Analise os componentes existentes para mapear todo o escopo
3. **Perguntas Esclarecedoras:** Fa√ßa 4-6 perguntas baseadas nas descobertas
4. **Plano de A√ß√£o:** Elabore um plano abrangente ap√≥s respostas
5. **Aprova√ß√£o:** Pe√ßa aprova√ß√£o antes de implementar
6. **Implementa√ß√£o:** Execute todas as etapas do plano
7. **Acompanhamento:** Mencione progresso e pr√≥ximos passos

## üêõ Modo Depurador

Quando solicitado a entrar no "Modo Depurador", siga exatamente esta sequ√™ncia:

1. **Reflex√£o:** Reflita sobre 5-7 poss√≠veis causas do problema
2. **Redu√ß√£o:** Reduza para 1-2 causas mais prov√°veis
3. **Logs:** Adicione logs para validar suposi√ß√µes
4. **An√°lise:** Reflita profundamente sobre o problema
5. **Corre√ß√£o:** Implemente a corre√ß√£o
6. **Limpeza:** Remova logs adicionais ap√≥s corre√ß√£o

## üìù Explica√ß√µes Detalhadas

Quando criar qualquer componente, hook, p√°gina ou arquivo novo, sempre explique:

### 1. **Estrutura e Organiza√ß√£o**

- Por que o arquivo est√° nessa pasta?
- Como se conecta com outros componentes?
- Qual o padr√£o arquitetural seguido?

### 2. **C√≥digo Linha por Linha**

- Explicar imports e suas fun√ß√µes
- Detalhar cada hook usado e seu prop√≥sito
- Explicar props, interfaces e tipos
- Mostrar como o componente se integra com o sistema

### 3. **Conceitos React/TypeScript**

- Explicar hooks espec√≠ficos (useState, useEffect, useForm, etc.)
- Detalhar padr√µes de design (composi√ß√£o, custom hooks, etc.)
- Mostrar boas pr√°ticas aplicadas
- Explicar TypeScript features usadas

### 4. **Integra√ß√£o com o Sistema**

- Como se conecta com APIs?
- Como gerencia estado?
- Como lida com valida√ß√£o?
- Como se integra com o design system?

### 5. **Exemplos Pr√°ticos**

- Mostrar como usar o componente
- Explicar casos de uso
- Demonstrar varia√ß√µes poss√≠veis

### 6. **Analogias e Compara√ß√µes**

- Comparar com conceitos conhecidos
- Usar analogias para facilitar entendimento
- Explicar "por que" al√©m do "como"

### 7. **Boas Pr√°ticas**

- Explicar decis√µes arquiteturais
- Mostrar alternativas consideradas
- Detalhar trade-offs e escolhas

## üìä Formato de Explica√ß√£o

Sempre incluir:

1. **Resumo Executivo** - O que o c√≥digo faz
2. **An√°lise Detalhada** - Como funciona
3. **Conceitos Aplicados** - React/TS patterns
4. **Integra√ß√£o** - Como se conecta
5. **Exemplos** - Como usar
6. **Reflex√£o** - Por que foi feito assim

## üéì N√≠vel de Explica√ß√£o

- Assumir conhecimento intermedi√°rio de React/JS
- Explicar conceitos avan√ßados quando aplicados
- Focar em padr√µes e boas pr√°ticas
- Mostrar o "pensamento por tr√°s" do c√≥digo

## üîÑ Migra√ß√£o e Evolu√ß√£o

- Fazer paralelos quando relevante
- Explicar diferen√ßas conceituais
- Mostrar vantagens dos padr√µes React
- Usar analogias do mundo enterprise quando √∫til

---

**√öltima atualiza√ß√£o:** $(date)  
**Vers√£o das regras:** 2.0.0
